using Microsoft.AspNetCore.Mvc;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.Win32;
using DUSAPI.Models;
using Microsoft.DotNet.Scaffolding.Shared.ProjectModel;
using Microsoft.CodeAnalysis.Scripting;

namespace DUSAPI.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class UserController : Controller
    {
        private readonly IConfiguration _configuration;
        private readonly dusContext _dbcontext;

    

        public UserController(IConfiguration configuration, dusContext _context)
        {

            _dbcontext = _context;
            _configuration = configuration;
        }

        [HttpGet]
        public ActionResult Get()
        {
            try
            {
                var result = _dbcontext.UserPeople.ToList();
                return Ok(result);
            }
            catch (Exception ex)
            {
                var results = ex;
                return Ok(results);
            }

        }

        [HttpGet]
        [Route("Count/User")]
        public ActionResult Count()
        {
            try
            {
                var result = _dbcontext.UserPeople.Count();
                if (result == 0)
                {
                    var results = "No existing data";
                    return Ok(results);
                }
                else
                {
                    return Ok(result);
                }
            }
            catch (Exception ex)
            {
                var results = ex;
                return Ok(results);
            }
        }

        //Register Account
        [HttpPost]
        [Route("Register/User")]
        public string insert(UserPerson UserPersons)
        {
            try
            {
                if (_dbcontext.UserPeople.Any(x => x.Email == UserPersons.Email))
                {
                    return "Email Already Registered";
                }
                else if (_dbcontext.UserPeople.Any(x => x.Username == UserPersons.Username))
                {
                    return "Username Already Registered";
                }
 /*               else if (UserPersons.Password.Length == 8)
                {
                    return "Minimum 8 password.";
                }*/
                else
                {
                    SqlConnection con = new SqlConnection(_configuration.GetConnectionString("sql-con").ToString());
                    SqlCommand cmd = new SqlCommand("Insert into user_person( Username, Password , Email , Lastname , Firstname , Middlename , ContactNumber , Address , UserType , AccountType) values('" + UserPersons.Username + "','" + BCrypt.Net.BCrypt.HashPassword(UserPersons.Password) + "','" + UserPersons.Email + "', '" + UserPersons.Lastname + "','" + UserPersons.Firstname + "','" + UserPersons.Middlename + "','" +  UserPersons.ContactNumber + "','" + UserPersons.Address + "','" + UserPersons.Status + "','" + UserPersons.Accounttype + "','" + UserPersons.Usertype + "')", con);
                    con.Open();
                    int i = cmd.ExecuteNonQuery();
                    con.Close();
                    if (i > 0)
                    {
                        return "Successfully registered";
                    }
                    else
                    {
                        return "Not Successfully registered";
                    }
                }
            }

            catch (Exception ex)
            {
                return ex.Message;
            }
        }



        //Login Account
        [HttpPost]
        [Route("Login/User")]
        public ActionResult login( UserPerson UserPersons)
        {
            try
            {
                var username = _dbcontext.UserPeople.SingleOrDefault(x => x.Username == UserPersons.Username);
                var email = _dbcontext.UserPeople.SingleOrDefault(x => x.Email == UserPersons.Email);

                if (email == null && username == null)
                {
                    var resultsss = "No existing users";
                    return Ok(resultsss);
                }


                else if (email != null )
                {

                    bool isValidPassword = BCrypt.Net.BCrypt.Verify(UserPersons?.Password, email?.Password);
                   

                    if (isValidPassword)
                    {
                        var response = "Correct Details";
                        return Ok(response);
                    }
                    else
                    {
                        var response = "Incorrect details";
                        return Ok(response);
                    }
                }

                else if(username != null)
                {
                    bool isValidPasswords = BCrypt.Net.BCrypt.Verify(UserPersons?.Password, username?.Password);
                    
                    if (isValidPasswords)
                    {
                        var response = "Correct Details";
                        return Ok(response);
                    }
                    else
                    {
                        var response = "Incorrect details";
                        return Ok(response);
                    }
                }
            }
            catch (Exception ex)
            {
                var response = ex.Message;
                return Ok(response);
            }

            return null;
        }

    }
}

